## Prophet model

import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from prophet import Prophet

# Load the modified Excel file
file_path = '/Users/allen/Desktop/Modified_Keukenhof_Data.xlsx'
data = pd.read_excel(file_path)

# Convert the 'time' column to datetime
data['time'] = pd.to_datetime(data['time'])

# Rename columns to match Prophet's expectations
data = data.rename(columns={'time': 'ds', 'travel time': 'y'})

# Create dummy variables for 'weather'
#data = pd.get_dummies(data, columns=['weather'])

# Filter data for training (January to March) and testing (March to May)
train_data = data[(data['ds'] >= '2024-03-23') & (data['ds'] <= '2024-04-30')]
test_data = data[(data['ds'] >= '2024-05-01') & (data['ds'] <= '2024-05-13')]

# Initialize the Prophet model
model = Prophet()

# Add additional regressors
model.add_regressor('speed (km/u)')
model.add_regressor('Timeliness (%)')
#for column in data.columns:
 #   if column.startswith('weather_'):
  #      model.add_regressor(column)

# Fit the model
model.fit(train_data)

# Make predictions
future = model.make_future_dataframe(periods=len(test_data), freq='H')
for column in data.columns:
    if column not in ['ds', 'y']:
        future[column] = data[column].iloc[:len(future)]

forecast = model.predict(future)

# Extract the predicted travel times
predicted_travel_time = forecast['yhat'].iloc[-len(test_data):]

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(test_data['y'], predicted_travel_time))

# Plot the results
plt.figure(figsize=(14, 7))
plt.plot(test_data['ds'], test_data['y'], label='Actual Travel Time', color='blue', alpha=0.6)
plt.plot(test_data['ds'], predicted_travel_time, label='Predicted Travel Time', color='red', alpha=0.6)
plt.title('Comparison of Actual and Predicted Travel Times on Prophet')
plt.xlabel('Time')
plt.ylabel('Travel Time (s)')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print(f"Root Mean Squared Error: {rmse}")
