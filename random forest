# Random Forest

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# Load the modified Excel file
file_path = '/Users/allen/Desktop/Modified_Keukenhof_Data.xlsx'
data = pd.read_excel(file_path)

# Convert the 'time' column to datetime
data['time'] = pd.to_datetime(data['time'])

# Adjust the date ranges for training and testing
train_data = data[(data['time'] >= '2024-03-23') & (data['time'] <= '2024-04-30')]
test_data = data[(data['time'] >= '2024-05-01') & (data['time'] <= '2024-05-13')]

# Create features from the date-time for model training
def create_features(df):
    df['hour'] = df['time'].dt.hour
    df['day'] = df['time'].dt.day
    df['month'] = df['time'].dt.month
    df['weekday'] = df['time'].dt.weekday
    return df[['hour', 'day', 'month', 'weekday', 'speed (km/u)', 'Timeliness (%)']]

# Preparing training and testing sets
X_train = create_features(train_data)
y_train = train_data['travel time']
X_test = create_features(test_data)
y_test = test_data['travel time']

# Train the RandomForest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

# Print the RMSE value
print(f"Root Mean Squared Error: {rmse}")

# Create a plot to compare the actual and predicted travel times
plt.figure(figsize=(14, 7))
plt.plot(test_data['time'], y_test, label='Actual Travel Time', color='blue', alpha=0.6)
plt.plot(test_data['time'], y_pred, label='Predicted Travel Time', color='red', alpha=0.6)
plt.title('Comparison of Actual and Predicted Travel Times on Random Forest')
plt.xlabel('Time')
plt.ylabel('Travel Time (s)')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
